name: CI

on:
  push:
    branches:
    - main
    - '*\@[0-9]+.[0-9]+.[0-9]+*'  # package development branch


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.get_pkg_info.outputs.branch }}
      pkg_name: ${{ steps.get_pkg_info.outputs.pkg_name }}
    steps:
    - uses: actions/checkout@v2

    - name: Extract package name and version from branch name
      id: get_pkg_info
      shell: bash
      run: |
        echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=pkg_name::$(echo ${GITHUB_REF#refs/heads/} |cut -d '@' -f 1)"
        echo "::set-output name=pkg_ver::$(echo ${GITHUB_REF#refs/heads/} |cut -d '@' -f 2)"

    - name: Login to GitHub Container Registry
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' }}
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Login to Quay.io Registry
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' }}
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: "icgc-argo+github_actions"
        password: ${{ secrets.QAUY_RT }}

    - name: Build image
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' }}
      uses: docker/build-push-action@v2
      with:
        context: "./${{steps.get_pkg_info.outputs.pkg_name}}"
        file: "./${{steps.get_pkg_info.outputs.pkg_name}}/Dockerfile"
        platforms: linux/amd64
        load: true
        tags: |
          ghcr.io/icgc-argo/${{steps.get_pkg_info.outputs.pkg_name}}:${{steps.get_pkg_info.outputs.pkg_ver}}
          quay.io/icgc-argo/${{steps.get_pkg_info.outputs.pkg_name}}:${{steps.get_pkg_info.outputs.pkg_ver}}

    - name: Push image to ghcr.io
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' }}
      run: |
        docker push ghcr.io/icgc-argo/${{steps.get_pkg_info.outputs.pkg_name}}:${{steps.get_pkg_info.outputs.pkg_ver}}

    - name: Push image to quay.io
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' }}
      run: |
        docker push quay.io/icgc-argo/${{steps.get_pkg_info.outputs.pkg_name}}:${{steps.get_pkg_info.outputs.pkg_ver}}

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.5
      uses: actions/setup-python@v2
      with:
        python-version: 3.5

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Install Nextflow
      run: |
        wget --tries=10 -qO- https://get.nextflow.io | bash
        sudo chmod 755 nextflow
        sudo mv nextflow /usr/local/bin/

    - name: Run tests for all packages
      if: ${{ needs.build.outputs.branch == 'main' }}
      run: |
        for t in `find . -type d -name tests |sort`; do
          pushd $t
          pwd
          ./run_tests.sh
          popd
        done

    - name: Run tests for the current package only
      if: ${{ needs.build.outputs.branch != 'main' }}
      run: |
        cd ./${{needs.build.outputs.pkg_name}}/tests
        ./run_tests.sh

  release:   # release when package dev branch is merged to main, if test pass then programmatically create release
    needs: [build,test]
    if:
      ${{
        startsWith(github.event.head_commit.message, 'Merge pull request') &&
        contains(github.event.head_commit.message, '[release]') &&
        needs.build.outputs.branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Extract package name and version from commit message
      id: get_pkg_info
      shell: bash
      run: |
        MERGED_BR=$(echo '${{ github.event.head_commit.message }}' | \
          grep '^Merge pull request' | awk -F'/' '{print $2}')
        PKG_NAME=$(echo $MERGED_BR | awk -F'@' '{print $1}')
        PKG_VER=$(echo $MERGED_BR | awk -F'@' '{print $2}')
        echo "::set-output name=pkg_name::$(echo ${PKG_NAME})"
        echo "::set-output name=pkg_ver::$(echo ${PKG_VER})"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_pkg_info.outputs.pkg_name }}.${{ steps.get_pkg_info.outputs.pkg_ver }}
        release_name: ${{ steps.get_pkg_info.outputs.pkg_name }}.${{ steps.get_pkg_info.outputs.pkg_ver }}
        body: |
          Release ${{ steps.get_pkg_info.outputs.pkg_name }}.${{ steps.get_pkg_info.outputs.pkg_ver }} (${{ github.sha }})
        draft: false
        prerelease: false
