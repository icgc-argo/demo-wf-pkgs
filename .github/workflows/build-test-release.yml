name: CI

on:
  push:
    branches:
    - main
    - '*\@[0-9]+.[0-9]+.[0-9]+*'  # package development branch

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '[no ci]') }}
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.get_pkg_info.outputs.branch }}
      pkg_name: ${{ steps.get_pkg_info.outputs.pkg_name }}
      pkg_ver: ${{ steps.get_pkg_info.outputs.pkg_ver }}
      docker_file: ${{ steps.get_pkg_info.outputs.docker_file }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.5
      uses: actions/setup-python@v2
      with:
        python-version: 3.5

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Extract package name and version from branch name
      id: get_pkg_info
      shell: bash
      run: |
        echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        PKG_NAME=$(echo ${GITHUB_REF#refs/heads/} | awk -F'@' '{print $1}')
        PKG_VER=$(echo ${GITHUB_REF#refs/heads/} | awk -F'@' '{print $2}')
        echo "::set-output name=pkg_name::$(echo $PKG_NAME)"
        echo "::set-output name=pkg_ver::$(echo $PKG_VER)"
        if [[ -f "./$PKG_NAME/Dockerfile" ]]; then
          echo "::set-output name=docker_file::$(echo ./$PKG_NAME/Dockerfile)"
        else
          echo "::set-output name=docker_file::"
        fi

    - name: Login to GitHub Container Registry
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' && steps.get_pkg_info.outputs.docker_file != ''}}
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Login to Quay.io Registry
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' && steps.get_pkg_info.outputs.docker_file != ''}}
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: "icgc-argo+github_actions"
        password: ${{ secrets.QAUY_RT }}

    - name: Build image
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' && steps.get_pkg_info.outputs.docker_file != ''}}
      uses: docker/build-push-action@v2
      with:
        context: "./${{steps.get_pkg_info.outputs.pkg_name}}"
        file: "${{steps.get_pkg_info.outputs.docker_file}}"
        platforms: linux/amd64
        load: true
        tags: |
          ghcr.io/${{ github.repository }}.${{ steps.get_pkg_info.outputs.pkg_name }}:${{ steps.get_pkg_info.outputs.pkg_ver }}
          quay.io/${{ github.repository }}.${{ steps.get_pkg_info.outputs.pkg_name }}:${{ steps.get_pkg_info.outputs.pkg_ver }}

    - name: Push image to ghcr.io
      id: push_to_ghcr
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' && steps.get_pkg_info.outputs.docker_file != ''}}
      shell: bash
      run: |
        docker push ghcr.io/${{ github.repository }}.${{ steps.get_pkg_info.outputs.pkg_name }}:${{ steps.get_pkg_info.outputs.pkg_ver }} | tee ./ghcr.io.stdout
        IMAGE_SHA=$(cat ./ghcr.io.stdout | tr ' ' '\n' | grep 'sha256:' | awk -F':' '{print $2}')
        echo "::set-output name=image_sha256::$(echo ${IMAGE_SHA})"
        echo "::set-output name=created_at::$(date -u +%FT%TZ)"

    - name: Push image to quay.io
      id: push_to_quay
      if: ${{ steps.get_pkg_info.outputs.branch != 'main' && steps.get_pkg_info.outputs.docker_file != ''}}
      shell: bash
      run: |
        docker push quay.io/${{ github.repository }}.${{ steps.get_pkg_info.outputs.pkg_name }}:${{ steps.get_pkg_info.outputs.pkg_ver }} | tee ./quay.io.stdout
        IMAGE_SHA=$(cat ./quay.io.stdout | tr ' ' '\n' | grep 'sha256:' | awk -F':' '{print $2}')
        echo "::set-output name=image_sha256::$(echo ${IMAGE_SHA})"

    - name: Compare image digests
      run: |
        if [[ "${{ steps.push_to_ghcr.outputs.image_sha256 }}" != "${{ steps.push_to_quay.outputs.image_sha256 }}" ]]; then
          echo "This should not happen, but the image digests from ghcr.io and quay.io are different. See above push steps for details."
          exit 1
        fi

    - name: Update container image digest in package_release.json
      shell: bash
      run: |
        # temporary solution
        ./scripts/update_image_digest.py \
          -p ${{ steps.get_pkg_info.outputs.pkg_name }}/package_release.json \
          -t sha256 \
          -c ${{ steps.push_to_ghcr.outputs.image_sha256 }} \
          -u ${{ steps.push_to_ghcr.outputs.created_at }} > tmp.json && \
        mv tmp.json ${{ steps.get_pkg_info.outputs.pkg_name }}/package_release.json

    - name: Add change, commit and push
      uses: EndBug/add-and-commit@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        add: '${{ steps.get_pkg_info.outputs.pkg_name }}/package_release.json'
        message: '[no ci] Update docker image digest using GitHub action: EndBug/add-and-commit@v6'
        push: true

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.5
      uses: actions/setup-python@v2
      with:
        python-version: 3.5

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Install Nextflow
      run: |
        wget --tries=10 -qO- https://get.nextflow.io | bash
        sudo chmod 755 nextflow
        sudo mv nextflow /usr/local/bin/

    - name: "Login to GitHub Container Registry"  # normally shouldn't need to loging, but new image when just created is private
      if: ${{ needs.build.outputs.branch != 'main' }}
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: "Login to Quay.io Registry"  # normally shouldn't need to loging, but new image when just created is private
      if: ${{ needs.build.outputs.branch != 'main' }}
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: "icgc-argo+github_actions"
        password: ${{ secrets.QAUY_RT }}

    - name: Run tests for all packages
      if: ${{ needs.build.outputs.branch == 'main' }}
      run: |
        for t in `find . -type d -name tests |sort`; do
          pushd $t
          pwd
          ./run_tests.sh
          popd
        done

    - name: Run tests for the current package only
      if: ${{ needs.build.outputs.branch != 'main' }}
      run: |
        cd ./${{needs.build.outputs.pkg_name}}/tests
        ./run_tests.sh

  release:   # release when package dev branch is merged to main, if test pass then programmatically create release
    needs: [build,test]
    if:
      ${{
        startsWith(github.event.head_commit.message, 'Merge pull request') &&
        contains(github.event.head_commit.message, '[release]') &&
        needs.build.outputs.branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Extract package name and version from commit message
      id: get_pkg_info
      shell: bash
      run: |
        MERGED_BR=$(echo -e '${{ github.event.head_commit.message }}' | \
          grep '^Merge pull request' | tr ' ' '\n' |grep '@' | awk -F'/' '{print $2}')
        PKG_NAME=$(echo $MERGED_BR | awk -F'@' '{print $1}')
        PKG_VER=$(echo $MERGED_BR | awk -F'@' '{print $2}')
        echo "::set-output name=pkg_name::$(echo ${PKG_NAME})"
        echo "::set-output name=pkg_ver::$(echo ${PKG_VER})"

    - name: Prepare release assets
      id: prep_assets
      shell: bash
      run: |
        ./scripts/cleanup_temp_files.sh  # just in case
        PKG_TAR=${{ steps.get_pkg_info.outputs.pkg_name }}.${{ steps.get_pkg_info.outputs.pkg_ver }}.tar.gz
        pushd ${{ steps.get_pkg_info.outputs.pkg_name }}
        tar --exclude=wfpr_modules --dereference -czvf ../$PKG_TAR .
        popd
        echo "::set-output name=pkg_tar::$(echo ${PKG_TAR})"
        echo "::set-output name=pkg_tar_sha::$(sha256sum ${PKG_TAR} |awk '{print $1}')"

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_pkg_info.outputs.pkg_name }}.${{ steps.get_pkg_info.outputs.pkg_ver }}
        release_name: ${{ steps.get_pkg_info.outputs.pkg_name }}.${{ steps.get_pkg_info.outputs.pkg_ver }}
        body: |
          * Release `${{ steps.get_pkg_info.outputs.pkg_name }}.${{ steps.get_pkg_info.outputs.pkg_ver }}` (${{ github.sha }})
          * Package `${{ steps.prep_assets.outputs.pkg_tar }}` (sha256: `${{ steps.prep_assets.outputs.pkg_tar_sha }}`)
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.prep_assets.outputs.pkg_tar }}
        asset_name: ${{ steps.prep_assets.outputs.pkg_tar }}
        asset_content_type: application/zip
